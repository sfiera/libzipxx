declare_args() {
  if (target_os == "linux" && rebase_path(".", "//") != ".") {
    libzip = "system"
  } else {
    libzip = "bundled"
  }
}
assert(libzip == "system" || libzip == "bundled")

config("libzipxx_public") {
  include_dirs = [ "include" ]
  if (current_toolchain == "//build/lib/win:msvc") {
    libs = [ "User32.lib" ]
  }
}

static_library("libzipxx") {
  sources = [
    "include/zipxx/Zip.hpp",
    "include/zipxx/zipxx.hpp",
    "src/zipxx/Zip.cpp",
  ]
  public_deps = [
    ":libzip",
    "//ext/procyon:procyon-cpp",
  ]
  public_configs = [ ":libzipxx_public" ]
}

if (libzip == "bundled") {
  config("libzip_private") {
    defines = [ "HAVE_CONFIG_H" ]
    include_dirs = [ "config/src/$target_os" ]
    cflags = [ "-Wno-implicit-function-declaration" ]
  }

  config("libzip_public") {
    include_dirs = [
      "libzip-1.1.3/lib",
      "config/include/$target_os",
    ]
    defines = [ "ZIP_STATIC" ]
  }

  static_library("libzip") {
    sources = [
      "libzip-1.1.3/lib/mkstemp.c",
      "libzip-1.1.3/lib/zip_add.c",
      "libzip-1.1.3/lib/zip_add_dir.c",
      "libzip-1.1.3/lib/zip_add_entry.c",
      "libzip-1.1.3/lib/zip_buffer.c",
      "libzip-1.1.3/lib/zip_close.c",
      "libzip-1.1.3/lib/zip_delete.c",
      "libzip-1.1.3/lib/zip_dir_add.c",
      "libzip-1.1.3/lib/zip_dirent.c",
      "libzip-1.1.3/lib/zip_discard.c",
      "libzip-1.1.3/lib/zip_entry.c",
      "libzip-1.1.3/lib/zip_err_str.c",
      "libzip-1.1.3/lib/zip_error.c",
      "libzip-1.1.3/lib/zip_error_clear.c",
      "libzip-1.1.3/lib/zip_error_get.c",
      "libzip-1.1.3/lib/zip_error_get_sys_type.c",
      "libzip-1.1.3/lib/zip_error_strerror.c",
      "libzip-1.1.3/lib/zip_error_to_str.c",
      "libzip-1.1.3/lib/zip_extra_field.c",
      "libzip-1.1.3/lib/zip_extra_field_api.c",
      "libzip-1.1.3/lib/zip_fclose.c",
      "libzip-1.1.3/lib/zip_fdopen.c",
      "libzip-1.1.3/lib/zip_file_add.c",
      "libzip-1.1.3/lib/zip_file_error_clear.c",
      "libzip-1.1.3/lib/zip_file_error_get.c",
      "libzip-1.1.3/lib/zip_file_get_comment.c",
      "libzip-1.1.3/lib/zip_file_get_external_attributes.c",
      "libzip-1.1.3/lib/zip_file_get_offset.c",
      "libzip-1.1.3/lib/zip_file_rename.c",
      "libzip-1.1.3/lib/zip_file_replace.c",
      "libzip-1.1.3/lib/zip_file_set_comment.c",
      "libzip-1.1.3/lib/zip_file_set_external_attributes.c",
      "libzip-1.1.3/lib/zip_file_set_mtime.c",
      "libzip-1.1.3/lib/zip_file_strerror.c",
      "libzip-1.1.3/lib/zip_filerange_crc.c",
      "libzip-1.1.3/lib/zip_fopen.c",
      "libzip-1.1.3/lib/zip_fopen_encrypted.c",
      "libzip-1.1.3/lib/zip_fopen_index.c",
      "libzip-1.1.3/lib/zip_fopen_index_encrypted.c",
      "libzip-1.1.3/lib/zip_fread.c",
      "libzip-1.1.3/lib/zip_get_archive_comment.c",
      "libzip-1.1.3/lib/zip_get_archive_flag.c",
      "libzip-1.1.3/lib/zip_get_compression_implementation.c",
      "libzip-1.1.3/lib/zip_get_encryption_implementation.c",
      "libzip-1.1.3/lib/zip_get_file_comment.c",
      "libzip-1.1.3/lib/zip_get_name.c",
      "libzip-1.1.3/lib/zip_get_num_entries.c",
      "libzip-1.1.3/lib/zip_get_num_files.c",
      "libzip-1.1.3/lib/zip_hash.c",
      "libzip-1.1.3/lib/zip_io_util.c",
      "libzip-1.1.3/lib/zip_memdup.c",
      "libzip-1.1.3/lib/zip_name_locate.c",
      "libzip-1.1.3/lib/zip_new.c",
      "libzip-1.1.3/lib/zip_open.c",
      "libzip-1.1.3/lib/zip_rename.c",
      "libzip-1.1.3/lib/zip_replace.c",
      "libzip-1.1.3/lib/zip_set_archive_comment.c",
      "libzip-1.1.3/lib/zip_set_archive_flag.c",
      "libzip-1.1.3/lib/zip_set_default_password.c",
      "libzip-1.1.3/lib/zip_set_file_comment.c",
      "libzip-1.1.3/lib/zip_set_file_compression.c",
      "libzip-1.1.3/lib/zip_set_name.c",
      "libzip-1.1.3/lib/zip_source_begin_write.c",
      "libzip-1.1.3/lib/zip_source_buffer.c",
      "libzip-1.1.3/lib/zip_source_call.c",
      "libzip-1.1.3/lib/zip_source_close.c",
      "libzip-1.1.3/lib/zip_source_commit_write.c",
      "libzip-1.1.3/lib/zip_source_crc.c",
      "libzip-1.1.3/lib/zip_source_deflate.c",
      "libzip-1.1.3/lib/zip_source_error.c",
      "libzip-1.1.3/lib/zip_source_filep.c",
      "libzip-1.1.3/lib/zip_source_free.c",
      "libzip-1.1.3/lib/zip_source_function.c",
      "libzip-1.1.3/lib/zip_source_is_deleted.c",
      "libzip-1.1.3/lib/zip_source_layered.c",
      "libzip-1.1.3/lib/zip_source_open.c",
      "libzip-1.1.3/lib/zip_source_pkware.c",
      "libzip-1.1.3/lib/zip_source_read.c",
      "libzip-1.1.3/lib/zip_source_remove.c",
      "libzip-1.1.3/lib/zip_source_rollback_write.c",
      "libzip-1.1.3/lib/zip_source_seek.c",
      "libzip-1.1.3/lib/zip_source_seek_write.c",
      "libzip-1.1.3/lib/zip_source_stat.c",
      "libzip-1.1.3/lib/zip_source_supports.c",
      "libzip-1.1.3/lib/zip_source_tell.c",
      "libzip-1.1.3/lib/zip_source_tell_write.c",
      "libzip-1.1.3/lib/zip_source_window.c",
      "libzip-1.1.3/lib/zip_source_write.c",
      "libzip-1.1.3/lib/zip_source_zip.c",
      "libzip-1.1.3/lib/zip_source_zip_new.c",
      "libzip-1.1.3/lib/zip_stat.c",
      "libzip-1.1.3/lib/zip_stat_index.c",
      "libzip-1.1.3/lib/zip_stat_init.c",
      "libzip-1.1.3/lib/zip_strerror.c",
      "libzip-1.1.3/lib/zip_string.c",
      "libzip-1.1.3/lib/zip_unchange.c",
      "libzip-1.1.3/lib/zip_unchange_all.c",
      "libzip-1.1.3/lib/zip_unchange_archive.c",
      "libzip-1.1.3/lib/zip_unchange_data.c",
      "libzip-1.1.3/lib/zip_utf-8.c",
    ]
    deps = [
      "//ext/zlib",
    ]
    configs += [ ":libzip_private" ]
    public_configs = [ ":libzip_public" ]
    if (target_os == "win") {
      sources += [
        "libzip-1.1.3/lib/zip_source_win32a.c",
        "libzip-1.1.3/lib/zip_source_win32handle.c",
        "libzip-1.1.3/lib/zip_source_win32utf8.c",
        "libzip-1.1.3/lib/zip_source_win32w.c",
      ]
    } else {
      sources += [ "libzip-1.1.3/lib/zip_source_file.c" ]
    }
  }

  executable("zipcmp") {
    sources = [
      "libzip-1.1.3/src/zipcmp.c",
    ]
    deps = [
      ":libzip",
    ]
    configs += [ ":libzip_private" ]
  }
} else {
  import("//build/lib/pkg_config.gni")

  pkg_config("libzip_public") {
    lib = "libzip"
  }

  source_set("libzip") {
    configs += [ ":libzip_public" ]
  }
}
